package kr.co.yeaeun.viewbasic

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.Manifest
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.graphics.Color
import android.net.Uri
import android.os.Build
import android.util.Log
import android.view.*
import android.view.View.inflate
import android.widget.*
import androidx.core.app.NotificationCompat
import androidx.core.content.getSystemService
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.StaggeredGridLayoutManager
import androidx.viewpager.widget.PagerAdapter
import androidx.viewpager.widget.ViewPager
import kotlinx.android.synthetic.main.activity_main.*

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        button.setOnClickListener{
            val builder1 = getNotificationBuilder("styke", "style Noticivation")
            builder1.setContentTitle("Big Picture")
            builder1.setContentText("Big Picture Notification")
            builder1.setSmallIcon(android.R.drawable.ic_menu_camera)

            // BigPicture Notification 객체를 생성
            val big = NotificationCompat.BigPictureStyle(builder1)
            // 보여줄 이미지를 설정한다, 어플리케이션 내부에 있는 이미지 사용: decodeResource
            val bitmap = BitmapFactory.decodeResource(resources, R.drawable.img_android)
            big.bigPicture(bitmap)
            // 펼쳤을 때 보여질 메시지
            big.setBigContentTitle("Big Content Title")
            big.setSummaryText("Summary Text")

            // 노티피케이션 객체 추출
            val notification = builder1.build()
            // 메시지 관리 객체 추출
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.notify(10, notification)
        }
        button2.setOnClickListener{
            val builder1 = getNotificationBuilder("styke", "style Noticivation")
            builder1.setContentTitle("Big Text")
            builder1.setContentText("Big Text Notification")
            builder1.setSmallIcon(android.R.drawable.ic_menu_camera)

            // Big Text Notification을 생성한다.
            val big = NotificationCompat.BigTextStyle(builder1)
            big.setBigContentTitle("Big Content Title")
            big.setSummaryText("Summary Text")
            big.bigText("가나다라마바사아자차카타파하아야어여우유")

            // 노티피케이션 객체 추출
            val notification = builder1.build()
            // 메시지 관리 객체 추출
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.notify(20, notification)
        }
        button3.setOnClickListener{
            val builder1 = getNotificationBuilder("styke", "style Noticivation")
            builder1.setContentTitle("InBox")
            builder1.setContentText("InBox Notification")
            builder1.setSmallIcon(android.R.drawable.ic_menu_camera)

            // InBox Style Notification을 생성한다.(OS 버전마다 문자열 제한 다름)
            val inbox = NotificationCompat.InboxStyle(builder1)
            inbox.setSummaryText("Summary Text")

            inbox.addLine("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
            inbox.addLine("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb")
            inbox.addLine("ccccccccccccccccccccccccccccccccccc")

            // 노티피케이션 객체 추출
            val notification = builder1.build()
            // 메시지 관리 객체 추출
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            manager.notify(30, notification)
        }
    }
    fun getNotificationBuilder(id: String, name: String) : NotificationCompat.Builder{
        // os 버전별로 나누기
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){ // 8.0 버전 이상
            // 메시지 관리 객체 추출
            val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            // 채널 객체 생성
            val channel = NotificationChannel(id, name, NotificationManager.IMPORTANCE_HIGH)
            // LED 셋팅
            channel.enableLights(true)
            channel.lightColor = Color.RED
            // 진동 사용 여부
            channel.enableVibration(true)
            // 노티 채널 등록
            manager.createNotificationChannel(channel)
            // 노티피케이션 사용을 위한 객체 생성
            val builder1 = NotificationCompat.Builder(this, id)
            return builder1
        }else {// 8.0 보다 낮은 버전이라면
            val builder2 = NotificationCompat.Builder(this)
            return builder2
        }
    }

}
